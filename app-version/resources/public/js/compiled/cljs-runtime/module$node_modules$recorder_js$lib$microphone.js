shadow$provide.module$node_modules$recorder_js$lib$microphone=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;"value"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){protoProps&&
defineProperties(Constructor.prototype,protoProps);staticProps&&defineProperties(Constructor,staticProps);return Constructor}}(),_inlineWorker2=(global=require("module$node_modules$inline_worker$index"))&&global.__esModule?global:{default:global},defaultConfig={bufferLen:4096,numChannels:2,mimeType:"audio/wav"};global=function(){function Microphone(source,config){var _this=this;if(!(this instanceof Microphone))throw new TypeError("Cannot call a class as a function");this.config=Object.assign({},defaultConfig,
config);this.recording=!1;this.callbacks={getBuffer:[],exportWAV:[]};this.context=source.context;this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,this.config.bufferLen,this.config.numChannels,this.config.numChannels);this.node.onaudioprocess=function(e){if(_this.recording){for(var buffer=[],channel=0;channel<_this.config.numChannels;channel++)buffer.push(e.inputBuffer.getChannelData(channel));_this.worker.postMessage({command:"record",buffer})}};
source.connect(this.node);this.node.connect(this.context.destination);this.worker=new _inlineWorker2.default(function(){function exportWAV(type){for(var buffers=[],channel=0;channel<numChannels;channel++)buffers.push(mergeBuffers(recBuffers[channel],recLength));if(2===numChannels){channel=buffers[0];buffers=buffers[1];for(var length=channel.length+buffers.length,result=new Float32Array(length),index=0,inputIndex=0;index<length;)result[index++]=channel[inputIndex],result[index++]=buffers[inputIndex],
inputIndex++;channel=result}else channel=buffers[0];buffers=new ArrayBuffer(44+2*channel.length);buffers=new DataView(buffers);writeString(buffers,0,"RIFF");buffers.setUint32(4,36+2*channel.length,!0);writeString(buffers,8,"WAVE");writeString(buffers,12,"fmt ");buffers.setUint32(16,16,!0);buffers.setUint16(20,1,!0);buffers.setUint16(22,numChannels,!0);buffers.setUint32(24,sampleRate,!0);buffers.setUint32(28,4*sampleRate,!0);buffers.setUint16(32,2*numChannels,!0);buffers.setUint16(34,16,!0);writeString(buffers,
36,"data");buffers.setUint32(40,2*channel.length,!0);length=44;for(result=0;result<channel.length;result++,length+=2)index=Math.max(-1,Math.min(1,channel[result])),buffers.setInt16(length,0>index?32768*index:32767*index,!0);type=new Blob([buffers],{type});this.postMessage({command:"exportWAV",data:type})}function getBuffer(){for(var buffers=[],channel=0;channel<numChannels;channel++)buffers.push(mergeBuffers(recBuffers[channel],recLength));this.postMessage({command:"getBuffer",data:buffers})}function initBuffers(){for(var channel=
0;channel<numChannels;channel++)recBuffers[channel]=[]}function mergeBuffers(recBuffers,recLength){recLength=new Float32Array(recLength);for(var offset=0,i=0;i<recBuffers.length;i++)recLength.set(recBuffers[i],offset),offset+=recBuffers[i].length;return recLength}function writeString(view,offset,string){for(var i=0;i<string.length;i+=1)view.setUint8(offset+i,string.charCodeAt(i))}var recLength=0,recBuffers=[],sampleRate=void 0,numChannels=void 0;this.onmessage=function(e){switch(e.data.command){case "init":e=
e.data.config;sampleRate=e.sampleRate;numChannels=e.numChannels;initBuffers();break;case "record":e=e.data.buffer;for(var channel=0;channel<numChannels;channel++)recBuffers[channel].push(e[channel]);recLength+=e[0].length;break;case "exportWAV":exportWAV(e.data.type);break;case "getBuffer":getBuffer();break;case "clear":recLength=0,recBuffers=[],initBuffers()}}},{});this.worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:this.config.numChannels}});this.worker.onmessage=
function(e){var cb=_this.callbacks[e.data.command].pop();"function"===typeof cb&&cb(e.data.data)}}_createClass(Microphone,[{key:"record",value:function(){this.recording=!0}},{key:"stop",value:function(){this.recording=!1}},{key:"clear",value:function(){this.worker.postMessage({command:"clear"})}},{key:"getBuffer",value:function(cb){cb=cb||this.config.callback;if(!cb)throw Error("Callback not set");this.callbacks.getBuffer.push(cb);this.worker.postMessage({command:"getBuffer"})}},{key:"exportWAV",
value:function(cb,mimeType){mimeType=mimeType||this.config.mimeType;cb=cb||this.config.callback;if(!cb)throw Error("Callback not set");this.callbacks.exportWAV.push(cb);this.worker.postMessage({command:"exportWAV",type:mimeType})}}]);return Microphone}();global.forceDownload=function(blob,filename){var a=document.createElement("a");a.style="display: none";document.body.appendChild(a);blob=window.URL.createObjectURL(blob);a.href=blob;a.download=filename;a.click();window.URL.revokeObjectURL(blob);document.body.removeChild(a)};
exports.default=global}
//# sourceMappingURL=module$node_modules$recorder_js$lib$microphone.js.map
