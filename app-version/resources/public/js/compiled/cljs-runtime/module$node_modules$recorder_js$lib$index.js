shadow$provide.module$node_modules$recorder_js$lib$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;"value"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){protoProps&&
defineProperties(Constructor.prototype,protoProps);staticProps&&defineProperties(Constructor,staticProps);return Constructor}}(),_microphone2=(global=require("module$node_modules$recorder_js$lib$microphone"))&&global.__esModule?global:{default:global},defaultConfig={nFrequencyBars:255,onAnalysed:null};global=function(){function Recorder(audioContext){var config=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(!(this instanceof Recorder))throw new TypeError("Cannot call a class as a function");
this.config=Object.assign({},defaultConfig,config);this.audioContext=audioContext;this.analyserContext=this.rafID=this.audioRecorder=this.inputPoint=this.realAudioInput=this.audioInput=null;this.recIndex=0;this.stream=null;this.updateAnalysers=this.updateAnalysers.bind(this)}_createClass(Recorder,[{key:"init",value:function(stream){var _this=this;return new Promise(function(resolve){_this.inputPoint=_this.audioContext.createGain();_this.stream=stream;_this.realAudioInput=_this.audioContext.createMediaStreamSource(stream);
_this.audioInput=_this.realAudioInput;_this.audioInput.connect(_this.inputPoint);_this.analyserNode=_this.audioContext.createAnalyser();_this.analyserNode.fftSize=2048;_this.inputPoint.connect(_this.analyserNode);_this.audioRecorder=new _microphone2.default(_this.inputPoint);var zeroGain=_this.audioContext.createGain();zeroGain.gain.value=0;_this.inputPoint.connect(zeroGain);zeroGain.connect(_this.audioContext.destination);_this.updateAnalysers();resolve()})}},{key:"start",value:function(){var _this2=
this;return new Promise(function(resolve,reject){_this2.audioRecorder?(_this2.audioRecorder.clear(),_this2.audioRecorder.record(),resolve(_this2.stream)):reject("Not currently recording")})}},{key:"stop",value:function(){var _this3=this;return new Promise(function(resolve){_this3.audioRecorder.stop();_this3.audioRecorder.getBuffer(function(buffer){_this3.audioRecorder.exportWAV(function(blob){return resolve({buffer,blob})})})})}},{key:"updateAnalysers",value:function(){if(this.config.onAnalysed){requestAnimationFrame(this.updateAnalysers);
var freqByteData=new Uint8Array(this.analyserNode.frequencyBinCount);this.analyserNode.getByteFrequencyData(freqByteData);for(var data=Array(255),lastNonZero=0,datum,idx=0;255>idx;idx+=1)datum=Math.floor(freqByteData[idx])-Math.floor(freqByteData[idx])%5,0!==datum&&(lastNonZero=idx),data[idx]=datum;this.config.onAnalysed({data,lineTo:lastNonZero})}}},{key:"setOnAnalysed",value:function(handler){this.config.onAnalysed=handler}}]);return Recorder}();global.download=function(blob){_microphone2.default.forceDownload(blob,
(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"audio")+".wav")};exports.default=global}
//# sourceMappingURL=module$node_modules$recorder_js$lib$index.js.map
