{
"version":3,
"file":"module$node_modules$pitchfinder$lib$tools$frequencies.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/pitchfinder/lib/tools/frequencies.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pitchfinder$lib$tools$frequencies\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_FREQUENCIES_PARAMS = {\n    tempo: 120,\n    quantization: 4,\n    sampleRate: 44100,\n};\nfunction pitchConsensus(detectors, chunk) {\n    var pitches = detectors\n        .map(function (fn) { return fn(chunk); })\n        .filter(function (value) { return value !== null; })\n        .sort(function (a, b) { return a - b; });\n    // In the case of one pitch, return it.\n    if (pitches.length === 1) {\n        return pitches[0];\n        // In the case of two pitches, return the geometric mean if they\n        // are close to each other, and the lower pitch otherwise.\n    }\n    else if (pitches.length === 2) {\n        var first = pitches[0], second = pitches[1];\n        return first * 2 > second ? Math.sqrt(first * second) : first;\n        // In the case of three or more pitches, filter away the extremes\n        // if they are very extreme, then take the geometric mean.\n    }\n    else {\n        var first = pitches[0];\n        var second = pitches[1];\n        var secondToLast = pitches[pitches.length - 2];\n        var last = pitches[pitches.length - 1];\n        var filtered1 = first * 2 > second ? pitches : pitches.slice(1);\n        var filtered2 = secondToLast * 2 > last ? filtered1 : filtered1.slice(0, -1);\n        return Math.pow(filtered2.reduce(function (t, p) { return t * p; }, 1), 1 / filtered2.length);\n    }\n}\nfunction frequencies(detector, float32AudioBuffer, options) {\n    if (options === void 0) { options = {}; }\n    var config = __assign(__assign({}, exports.DEFAULT_FREQUENCIES_PARAMS), options);\n    var tempo = config.tempo, quantization = config.quantization, sampleRate = config.sampleRate;\n    var bufferLength = float32AudioBuffer.length;\n    var chunkSize = Math.round((sampleRate * 60) / (quantization * tempo));\n    var getPitch;\n    if (Array.isArray(detector)) {\n        getPitch = pitchConsensus.bind(null, detector);\n    }\n    else {\n        getPitch = detector;\n    }\n    var pitches = [];\n    for (var i = 0, max = bufferLength - chunkSize; i <= max; i += chunkSize) {\n        var chunk = float32AudioBuffer.slice(i, i + chunkSize);\n        var pitch = getPitch(chunk);\n        pitches.push(pitch);\n    }\n    return pitches;\n}\nexports.frequencies = frequencies;\n\n};"],
"names":["shadow$provide","global","require","module","exports","pitchConsensus","detectors","chunk","pitches","map","fn","filter","value","sort","a","b","length","first","second","Math","sqrt","secondToLast","last","filtered1","slice","filtered2","pow","reduce","t","p","__assign","Object","assign","s","i","n","arguments","prototype","hasOwnProperty","call","apply","defineProperty","DEFAULT_FREQUENCIES_PARAMS","tempo","quantization","sampleRate","frequencies","detector","float32AudioBuffer","options","config","bufferLength","chunkSize","round","getPitch","Array","isArray","bind","max","pitch","push"]
}
