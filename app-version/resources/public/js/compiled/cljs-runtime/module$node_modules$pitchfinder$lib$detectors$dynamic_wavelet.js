shadow$provide.module$node_modules$pitchfinder$lib$detectors$dynamic_wavelet=function(global,require,module,exports){var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var DEFAULT_DYNAMIC_WAVELET_CONFIG={sampleRate:44100};exports.DynamicWavelet=
function(params){void 0===params&&(params={});var sampleRate=__assign(__assign({},DEFAULT_DYNAMIC_WAVELET_CONFIG),params).sampleRate;return function(float32AudioBuffer){for(var mins=[],bufferLength=float32AudioBuffer.length,freq=null,theDC=0,minValue=0,maxValue=0,i=0;i<bufferLength;i++){var sample=float32AudioBuffer[i];theDC+=sample;maxValue=Math.max(maxValue,sample);minValue=Math.min(minValue,sample)}theDC/=bufferLength;minValue-=theDC;maxValue-=theDC;minValue=.75*(maxValue>-1*minValue?maxValue:
-1*minValue);maxValue=0;sample=-1;for(var curSamNb=float32AudioBuffer.length,delta,nbMaxs,nbMins;;){delta=~~(sampleRate/(3E3*Math.pow(2,maxValue)));if(2>curSamNb)break;var previousDV=-1E3,lastMinIndex=-1E6,lastMaxIndex=-1E6,findMax=!1,findMin=!1;nbMaxs=nbMins=0;for(i=2;i<curSamNb;i++){var si=float32AudioBuffer[i]-theDC;var dv=float32AudioBuffer[i-1]-theDC;0>=dv&&0<si&&(findMax=!0);0<=dv&&0>si&&(findMin=!0);dv=si-dv;-1E3<previousDV&&(findMin&&0>previousDV&&0<=dv&&Math.abs(si)>=minValue&&i>lastMinIndex+
delta&&(lastMinIndex=mins[nbMins++]=i,findMin=!1),findMax&&0<previousDV&&0>=dv&&Math.abs(si)>=minValue&&i>lastMaxIndex+delta&&(nbMaxs++,lastMaxIndex=i,findMax=!1));previousDV=dv}if(0===nbMins&&0===nbMaxs)break;nbMaxs=[];for(i=0;i<curSamNb;i++)nbMaxs[i]=0;for(i=0;i<nbMins;i++)for(previousDV=1;3>previousDV;previousDV++)i+previousDV<nbMins&&(lastMinIndex=Math.abs(mins[i]-mins[i+previousDV]),nbMaxs[lastMinIndex]+=1);lastMinIndex=nbMins=-1;for(i=0;i<curSamNb;i++){lastMaxIndex=0;for(previousDV=-1*delta;previousDV<=
delta;previousDV++)0<=i+previousDV&&i+previousDV<curSamNb&&(lastMaxIndex+=nbMaxs[i+previousDV]);lastMaxIndex===lastMinIndex?i===2*nbMins&&(nbMins=i):lastMaxIndex>lastMinIndex&&(lastMinIndex=lastMaxIndex,nbMins=i)}lastMinIndex=i=0;for(previousDV=-delta;previousDV<=delta;previousDV++)0<=nbMins+previousDV&&nbMins+previousDV<bufferLength&&(lastMaxIndex=nbMaxs[nbMins+previousDV],0<lastMaxIndex&&(lastMinIndex+=lastMaxIndex,i+=(nbMins+previousDV)*lastMaxIndex));i/=lastMinIndex;if(-1<sample&&Math.abs(2*i-
sample)<=2*delta){freq=sampleRate/(Math.pow(2,maxValue-1)*sample);break}sample=i;maxValue++;if(6<=maxValue||2>curSamNb)break;delta=float32AudioBuffer.subarray(0);curSamNb===nbMaxs.length&&(delta=new Float32Array(curSamNb/2));for(i=0;i<curSamNb/2;i++)delta[i]=(float32AudioBuffer[2*i]+float32AudioBuffer[2*i+1])/2;float32AudioBuffer=delta;curSamNb/=2}return freq}}}
//# sourceMappingURL=module$node_modules$pitchfinder$lib$detectors$dynamic_wavelet.js.map
