{
"version":3,
"file":"module$node_modules$wav_decoder$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/wav-decoder/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$wav_decoder$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar formats = {\n  0x0001: \"lpcm\",\n  0x0003: \"lpcm\"\n};\n\nfunction decodeSync(buffer, opts) {\n  opts = opts || {};\n\n  if (global.Buffer && buffer instanceof global.Buffer) {\n    buffer = Uint8Array.from(buffer).buffer;\n  }\n\n  var dataView = new DataView(buffer);\n  var reader = createReader(dataView);\n\n  if (reader.string(4) !== \"RIFF\") {\n    throw new TypeError(\"Invalid WAV file\");\n  }\n\n  reader.uint32(); // skip file length\n\n  if (reader.string(4) !== \"WAVE\") {\n    throw new TypeError(\"Invalid WAV file\");\n  }\n\n  var format = null;\n  var audioData = null;\n\n  do {\n    var chunkType = reader.string(4);\n    var chunkSize = reader.uint32();\n\n    switch (chunkType) {\n    case \"fmt \":\n      format = decodeFormat(reader, chunkSize);\n      if (format instanceof Error) {\n        throw format;\n      }\n      break;\n    case \"data\":\n      audioData = decodeData(reader, chunkSize, format, opts);\n      if (audioData instanceof Error) {\n        throw audioData;\n      }\n      break;\n    default:\n      reader.skip(chunkSize);\n      break;\n    }\n  } while (audioData === null);\n\n  return audioData;\n}\n\nfunction decode(buffer, opts) {\n  return new Promise(function(resolve) {\n    resolve(decodeSync(buffer, opts));\n  });\n}\n\nfunction decodeFormat(reader, chunkSize) {\n  var formatId = reader.uint16();\n\n  if (!formats.hasOwnProperty(formatId)) {\n    return new TypeError(\"Unsupported format in WAV file: 0x\" + formatId.toString(16));\n  }\n\n  var format = {\n    formatId: formatId,\n    floatingPoint: formatId === 0x0003,\n    numberOfChannels: reader.uint16(),\n    sampleRate: reader.uint32(),\n    byteRate: reader.uint32(),\n    blockSize: reader.uint16(),\n    bitDepth: reader.uint16()\n  };\n  reader.skip(chunkSize - 16);\n\n  return format;\n}\n\nfunction decodeData(reader, chunkSize, format, opts) {\n  chunkSize = Math.min(chunkSize, reader.remain());\n\n  var length = Math.floor(chunkSize / format.blockSize);\n  var numberOfChannels = format.numberOfChannels;\n  var sampleRate = format.sampleRate;\n  var channelData = new Array(numberOfChannels);\n\n  for (var ch = 0; ch < numberOfChannels; ch++) {\n    channelData[ch] = new Float32Array(length);\n  }\n\n  var retVal = readPCM(reader, channelData, length, format, opts);\n\n  if (retVal instanceof Error) {\n    return retVal;\n  }\n\n  return {\n    numberOfChannels: numberOfChannels,\n    length: length,\n    sampleRate: sampleRate,\n    channelData: channelData\n  };\n}\n\nfunction readPCM(reader, channelData, length, format, opts) {\n  var bitDepth = format.bitDepth;\n  var decoderOption = format.floatingPoint ? \"f\" : opts.symmetric ? \"s\" : \"\";\n  var methodName = \"pcm\" + bitDepth + decoderOption;\n\n  if (!reader[methodName]) {\n    return new TypeError(\"Not supported bit depth: \" + format.bitDepth);\n  }\n\n  var read = reader[methodName].bind(reader);\n  var numberOfChannels = format.numberOfChannels;\n\n  for (var i = 0; i < length; i++) {\n    for (var ch = 0; ch < numberOfChannels; ch++) {\n      channelData[ch][i] = read();\n    }\n  }\n\n  return null;\n}\n\nfunction createReader(dataView) {\n  var pos = 0;\n\n  return {\n    remain: function() {\n      return dataView.byteLength - pos;\n    },\n    skip: function(n) {\n      pos += n;\n    },\n    uint8: function() {\n      var data = dataView.getUint8(pos, true);\n\n      pos += 1;\n\n      return data;\n    },\n    int16: function() {\n      var data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data;\n    },\n    uint16: function() {\n      var data = dataView.getUint16(pos, true);\n\n      pos += 2;\n\n      return data;\n    },\n    uint32: function() {\n      var data = dataView.getUint32(pos, true);\n\n      pos += 4;\n\n      return data;\n    },\n    string: function(n) {\n      var data = \"\";\n\n      for (var i = 0; i < n; i++) {\n        data += String.fromCharCode(this.uint8());\n      }\n\n      return data;\n    },\n    pcm8: function() {\n      var data = dataView.getUint8(pos) - 128;\n\n      pos += 1;\n\n      return data < 0 ? data / 128 : data / 127;\n    },\n    pcm8s: function() {\n      var data = dataView.getUint8(pos) - 127.5;\n\n      pos += 1;\n\n      return data / 127.5;\n    },\n    pcm16: function() {\n      var data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data < 0 ? data / 32768 : data / 32767;\n    },\n    pcm16s: function() {\n      var data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data / 32768;\n    },\n    pcm24: function() {\n      var x0 = dataView.getUint8(pos + 0);\n      var x1 = dataView.getUint8(pos + 1);\n      var x2 = dataView.getUint8(pos + 2);\n      var xx = (x0 + (x1 << 8) + (x2 << 16));\n      var data = xx > 0x800000 ? xx - 0x1000000 : xx;\n\n      pos += 3;\n\n      return data < 0 ? data / 8388608 : data / 8388607;\n    },\n    pcm24s: function() {\n      var x0 = dataView.getUint8(pos + 0);\n      var x1 = dataView.getUint8(pos + 1);\n      var x2 = dataView.getUint8(pos + 2);\n      var xx = (x0 + (x1 << 8) + (x2 << 16));\n      var data = xx > 0x800000 ? xx - 0x1000000 : xx;\n\n      pos += 3;\n\n      return data / 8388608;\n    },\n    pcm32: function() {\n      var data = dataView.getInt32(pos, true);\n\n      pos += 4;\n\n      return data < 0 ? data / 2147483648 : data / 2147483647;\n    },\n    pcm32s: function() {\n      var data = dataView.getInt32(pos, true);\n\n      pos += 4;\n\n      return data / 2147483648;\n    },\n    pcm32f: function() {\n      var data = dataView.getFloat32(pos, true);\n\n      pos += 4;\n\n      return data;\n    },\n    pcm64f: function() {\n      var data = dataView.getFloat64(pos, true);\n\n      pos += 8;\n\n      return data;\n    }\n  };\n}\n\nmodule.exports.decode = decode;\nmodule.exports.decode.sync = decodeSync;\n\n};"],
"names":["shadow$provide","global","require","module","exports","decodeSync","buffer","opts","Buffer","Uint8Array","from","dataView","DataView","reader","createReader","string","TypeError","uint32","format","audioData","chunkType","chunkSize","formatId","uint16","formats","hasOwnProperty","floatingPoint","numberOfChannels","sampleRate","byteRate","blockSize","bitDepth","skip","toString","Error","Math","min","remain","length","floor","channelData","Array","ch","Float32Array","methodName","decoderOption","symmetric","read","bind","i","retVal","pos","byteLength","n","uint8","data","getUint8","int16","getInt16","getUint16","getUint32","String","fromCharCode","pcm8","pcm8s","pcm16","pcm16s","pcm24","x0","x1","x2","xx","pcm24s","pcm32","getInt32","pcm32s","pcm32f","getFloat32","pcm64f","getFloat64","decode","Promise","resolve","sync"]
}
