{
"version":3,
"file":"module$node_modules$pitchfinder$lib$detectors$amdf.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/pitchfinder/lib/detectors/amdf.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pitchfinder$lib$detectors$amdf\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_AMDF_PARAMS = {\n    sampleRate: 44100,\n    minFrequency: 82,\n    maxFrequency: 1000,\n    ratio: 5,\n    sensitivity: 0.1,\n};\nfunction AMDF(params) {\n    if (params === void 0) { params = {}; }\n    var config = __assign(__assign({}, DEFAULT_AMDF_PARAMS), params);\n    var sampleRate = config.sampleRate;\n    var minFrequency = config.minFrequency;\n    var maxFrequency = config.maxFrequency;\n    var sensitivity = config.sensitivity;\n    var ratio = config.ratio;\n    var amd = [];\n    /* Round in such a way that both exact minPeriod as\n     exact maxPeriod lie inside the rounded span minPeriod-maxPeriod,\n     thus ensuring that minFrequency and maxFrequency can be found\n     even in edge cases */\n    var maxPeriod = Math.ceil(sampleRate / minFrequency);\n    var minPeriod = Math.floor(sampleRate / maxFrequency);\n    return function AMDFDetector(float32AudioBuffer) {\n        var maxShift = float32AudioBuffer.length;\n        var t = 0;\n        var minval = Infinity;\n        var maxval = -Infinity;\n        var frames1, frames2, calcSub, i, j, u, aux1, aux2;\n        // Find the average magnitude difference for each possible period offset.\n        for (i = 0; i < maxShift; i++) {\n            if (minPeriod <= i && i <= maxPeriod) {\n                for (aux1 = 0, aux2 = i, t = 0, frames1 = [], frames2 = []; aux1 < maxShift - i; t++, aux2++, aux1++) {\n                    frames1[t] = float32AudioBuffer[aux1];\n                    frames2[t] = float32AudioBuffer[aux2];\n                }\n                // Take the difference between these frames.\n                var frameLength = frames1.length;\n                calcSub = [];\n                for (u = 0; u < frameLength; u++) {\n                    calcSub[u] = frames1[u] - frames2[u];\n                }\n                // Sum the differences.\n                var summation = 0;\n                for (u = 0; u < frameLength; u++) {\n                    summation += Math.abs(calcSub[u]);\n                }\n                amd[i] = summation;\n            }\n        }\n        for (j = minPeriod; j < maxPeriod; j++) {\n            if (amd[j] < minval)\n                minval = amd[j];\n            if (amd[j] > maxval)\n                maxval = amd[j];\n        }\n        var cutoff = Math.round(sensitivity * (maxval - minval) + minval);\n        for (j = minPeriod; j <= maxPeriod && amd[j] > cutoff; j++)\n            ;\n        var searchLength = minPeriod / 2;\n        minval = amd[j];\n        var minpos = j;\n        for (i = j - 1; i < j + searchLength && i <= maxPeriod; i++) {\n            if (amd[i] < minval) {\n                minval = amd[i];\n                minpos = i;\n            }\n        }\n        if (Math.round(amd[minpos] * ratio) < maxval) {\n            return sampleRate / minpos;\n        }\n        else {\n            return null;\n        }\n    };\n}\nexports.AMDF = AMDF;\n\n};"],
"names":["shadow$provide","global","require","module","exports","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","value","DEFAULT_AMDF_PARAMS","sampleRate","minFrequency","maxFrequency","ratio","sensitivity","AMDF","params","config","amd","maxPeriod","Math","ceil","minPeriod","floor","AMDFDetector","float32AudioBuffer","maxShift","minval","Infinity","maxval","frames2","aux1","aux2","frames1","frameLength","calcSub","u","summation","abs","j","cutoff","round","searchLength","minpos"]
}
