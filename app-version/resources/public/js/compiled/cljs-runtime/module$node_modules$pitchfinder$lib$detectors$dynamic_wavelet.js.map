{
"version":3,
"file":"module$node_modules$pitchfinder$lib$detectors$dynamic_wavelet.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/pitchfinder/lib/detectors/dynamic_wavelet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pitchfinder$lib$detectors$dynamic_wavelet\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MAX_FLWT_LEVELS = 6;\nvar MAX_F = 3000;\nvar DIFFERENCE_LEVELS_N = 3;\nvar MAXIMA_THRESHOLD_RATIO = 0.75;\nvar DEFAULT_DYNAMIC_WAVELET_CONFIG = {\n    sampleRate: 44100,\n};\nfunction DynamicWavelet(params) {\n    if (params === void 0) { params = {}; }\n    var config = __assign(__assign({}, DEFAULT_DYNAMIC_WAVELET_CONFIG), params);\n    var sampleRate = config.sampleRate;\n    return function DynamicWaveletDetector(float32AudioBuffer) {\n        var mins = [];\n        var maxs = [];\n        var bufferLength = float32AudioBuffer.length;\n        var freq = null;\n        var theDC = 0;\n        var minValue = 0;\n        var maxValue = 0;\n        // Compute max amplitude, amplitude threshold, and the DC.\n        for (var i = 0; i < bufferLength; i++) {\n            var sample = float32AudioBuffer[i];\n            theDC = theDC + sample;\n            maxValue = Math.max(maxValue, sample);\n            minValue = Math.min(minValue, sample);\n        }\n        theDC /= bufferLength;\n        minValue -= theDC;\n        maxValue -= theDC;\n        var amplitudeMax = maxValue > -1 * minValue ? maxValue : -1 * minValue;\n        var amplitudeThreshold = amplitudeMax * MAXIMA_THRESHOLD_RATIO;\n        // levels, start without downsampling...\n        var curLevel = 0;\n        var curModeDistance = -1;\n        var curSamNb = float32AudioBuffer.length;\n        var delta, nbMaxs, nbMins;\n        // Search:\n        while (true) {\n            delta = ~~(sampleRate / (Math.pow(2, curLevel) * MAX_F));\n            if (curSamNb < 2)\n                break;\n            var dv = void 0;\n            var previousDV = -1000;\n            var lastMinIndex = -1000000;\n            var lastMaxIndex = -1000000;\n            var findMax = false;\n            var findMin = false;\n            nbMins = 0;\n            nbMaxs = 0;\n            for (var i = 2; i < curSamNb; i++) {\n                var si = float32AudioBuffer[i] - theDC;\n                var si1 = float32AudioBuffer[i - 1] - theDC;\n                if (si1 <= 0 && si > 0)\n                    findMax = true;\n                if (si1 >= 0 && si < 0)\n                    findMin = true;\n                // min or max ?\n                dv = si - si1;\n                if (previousDV > -1000) {\n                    if (findMin && previousDV < 0 && dv >= 0) {\n                        // minimum\n                        if (Math.abs(si) >= amplitudeThreshold) {\n                            if (i > lastMinIndex + delta) {\n                                mins[nbMins++] = i;\n                                lastMinIndex = i;\n                                findMin = false;\n                            }\n                        }\n                    }\n                    if (findMax && previousDV > 0 && dv <= 0) {\n                        // maximum\n                        if (Math.abs(si) >= amplitudeThreshold) {\n                            if (i > lastMaxIndex + delta) {\n                                maxs[nbMaxs++] = i;\n                                lastMaxIndex = i;\n                                findMax = false;\n                            }\n                        }\n                    }\n                }\n                previousDV = dv;\n            }\n            if (nbMins === 0 && nbMaxs === 0) {\n                // No best distance found!\n                break;\n            }\n            var d = void 0;\n            var distances = [];\n            for (var i = 0; i < curSamNb; i++) {\n                distances[i] = 0;\n            }\n            for (var i = 0; i < nbMins; i++) {\n                for (var j = 1; j < DIFFERENCE_LEVELS_N; j++) {\n                    if (i + j < nbMins) {\n                        d = Math.abs(mins[i] - mins[i + j]);\n                        distances[d] += 1;\n                    }\n                }\n            }\n            var bestDistance = -1;\n            var bestValue = -1;\n            for (var i = 0; i < curSamNb; i++) {\n                var summed = 0;\n                for (var j = -1 * delta; j <= delta; j++) {\n                    if (i + j >= 0 && i + j < curSamNb) {\n                        summed += distances[i + j];\n                    }\n                }\n                if (summed === bestValue) {\n                    if (i === 2 * bestDistance) {\n                        bestDistance = i;\n                    }\n                }\n                else if (summed > bestValue) {\n                    bestValue = summed;\n                    bestDistance = i;\n                }\n            }\n            // averaging\n            var distAvg = 0;\n            var nbDists = 0;\n            for (var j = -delta; j <= delta; j++) {\n                if (bestDistance + j >= 0 && bestDistance + j < bufferLength) {\n                    var nbDist = distances[bestDistance + j];\n                    if (nbDist > 0) {\n                        nbDists += nbDist;\n                        distAvg += (bestDistance + j) * nbDist;\n                    }\n                }\n            }\n            // This is our mode distance.\n            distAvg /= nbDists;\n            // Continue the levels?\n            if (curModeDistance > -1) {\n                if (Math.abs(distAvg * 2 - curModeDistance) <= 2 * delta) {\n                    // two consecutive similar mode distances : ok !\n                    freq = sampleRate / (Math.pow(2, curLevel - 1) * curModeDistance);\n                    break;\n                }\n            }\n            // not similar, continue next level;\n            curModeDistance = distAvg;\n            curLevel++;\n            if (curLevel >= MAX_FLWT_LEVELS || curSamNb < 2) {\n                break;\n            }\n            //do not modify original audio buffer, make a copy buffer, if\n            //downsampling is needed (only once).\n            var newFloat32AudioBuffer = float32AudioBuffer.subarray(0);\n            if (curSamNb === distances.length) {\n                newFloat32AudioBuffer = new Float32Array(curSamNb / 2);\n            }\n            for (var i = 0; i < curSamNb / 2; i++) {\n                newFloat32AudioBuffer[i] =\n                    (float32AudioBuffer[2 * i] + float32AudioBuffer[2 * i + 1]) / 2;\n            }\n            float32AudioBuffer = newFloat32AudioBuffer;\n            curSamNb /= 2;\n        }\n        return freq;\n    };\n}\nexports.DynamicWavelet = DynamicWavelet;\n\n};"],
"names":["shadow$provide","global","require","module","exports","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","value","DEFAULT_DYNAMIC_WAVELET_CONFIG","sampleRate","DynamicWavelet","params","config","DynamicWaveletDetector","float32AudioBuffer","mins","bufferLength","freq","theDC","minValue","maxValue","sample","Math","max","min","amplitudeThreshold","MAXIMA_THRESHOLD_RATIO","amplitudeMax","curLevel","curModeDistance","curSamNb","delta","nbMaxs","nbMins","MAX_F","pow","previousDV","lastMinIndex","lastMaxIndex","findMax","findMin","si","si1","dv","abs","distances","j","DIFFERENCE_LEVELS_N","d","bestValue","bestDistance","summed","nbDists","distAvg","nbDist","MAX_FLWT_LEVELS","newFloat32AudioBuffer","subarray","Float32Array"]
}
