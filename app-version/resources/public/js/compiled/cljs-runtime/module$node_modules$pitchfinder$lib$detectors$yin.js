shadow$provide.module$node_modules$pitchfinder$lib$detectors$yin=function(global,require,module,exports){var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var DEFAULT_YIN_PARAMS={threshold:.1,sampleRate:44100,probabilityThreshold:.1};exports.YIN=
function(params){void 0===params&&(params={});params=__assign(__assign({},DEFAULT_YIN_PARAMS),params);var threshold=params.threshold,sampleRate=params.sampleRate,probabilityThreshold=params.probabilityThreshold;return function(float32AudioBuffer){var bufferSize;for(bufferSize=1;bufferSize<float32AudioBuffer.length;bufferSize*=2);var yinBufferLength=bufferSize/2/2;bufferSize=new Float32Array(yinBufferLength);for(var probability=0,t=0;t<yinBufferLength;t++)bufferSize[t]=0;for(t=1;t<yinBufferLength;t++)for(var i=
0;i<yinBufferLength;i++){var delta=float32AudioBuffer[i]-float32AudioBuffer[i+t];bufferSize[t]+=delta*delta}bufferSize[0]=1;bufferSize[1]=1;float32AudioBuffer=0;for(t=1;t<yinBufferLength;t++)float32AudioBuffer+=bufferSize[t],bufferSize[t]*=t/float32AudioBuffer;for(float32AudioBuffer=2;float32AudioBuffer<yinBufferLength;float32AudioBuffer++)if(bufferSize[float32AudioBuffer]<threshold){for(;float32AudioBuffer+1<yinBufferLength&&bufferSize[float32AudioBuffer+1]<bufferSize[float32AudioBuffer];)float32AudioBuffer++;
probability=1-bufferSize[float32AudioBuffer];break}if(float32AudioBuffer===yinBufferLength||bufferSize[float32AudioBuffer]>=threshold||probability<probabilityThreshold)return null;probability=1>float32AudioBuffer?float32AudioBuffer:float32AudioBuffer-1;yinBufferLength=float32AudioBuffer+1<yinBufferLength?float32AudioBuffer+1:float32AudioBuffer;probability===float32AudioBuffer?bufferSize=bufferSize[float32AudioBuffer]<=bufferSize[yinBufferLength]?float32AudioBuffer:yinBufferLength:yinBufferLength===
float32AudioBuffer?bufferSize=bufferSize[float32AudioBuffer]<=bufferSize[probability]?float32AudioBuffer:probability:(probability=bufferSize[probability],yinBufferLength=bufferSize[yinBufferLength],bufferSize=float32AudioBuffer+(yinBufferLength-probability)/(2*(2*bufferSize[float32AudioBuffer]-yinBufferLength-probability)));return sampleRate/bufferSize}}}
//# sourceMappingURL=module$node_modules$pitchfinder$lib$detectors$yin.js.map
