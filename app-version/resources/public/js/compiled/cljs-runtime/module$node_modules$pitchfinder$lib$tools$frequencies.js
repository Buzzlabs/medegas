shadow$provide.module$node_modules$pitchfinder$lib$tools$frequencies=function(global,require,module,exports){function pitchConsensus(detectors,chunk){var pitches=detectors.map(function(fn){return fn(chunk)}).filter(function(value){return null!==value}).sort(function(a,b){return a-b});if(1===pitches.length)return pitches[0];if(2===pitches.length){var first=pitches[0],second=pitches[1];return 2*first>second?Math.sqrt(first*second):first}first=pitches[0];second=pitches[1];detectors=pitches[pitches.length-
2];var last=pitches[pitches.length-1];pitches=2*first>second?pitches:pitches.slice(1);detectors=2*detectors>last?pitches:pitches.slice(0,-1);return Math.pow(detectors.reduce(function(t,p){return t*p},1),1/detectors.length)}var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};Object.defineProperty(exports,
"__esModule",{value:!0});exports.DEFAULT_FREQUENCIES_PARAMS={tempo:120,quantization:4,sampleRate:44100};exports.frequencies=function(detector,float32AudioBuffer,options){void 0===options&&(options={});options=__assign(__assign({},exports.DEFAULT_FREQUENCIES_PARAMS),options);var bufferLength=float32AudioBuffer.length;options=Math.round(60*options.sampleRate/(options.quantization*options.tempo));detector=Array.isArray(detector)?pitchConsensus.bind(null,detector):detector;var pitches=[],i=0;for(bufferLength-=
options;i<=bufferLength;i+=options){var chunk=float32AudioBuffer.slice(i,i+options);chunk=detector(chunk);pitches.push(chunk)}return pitches}}
//# sourceMappingURL=module$node_modules$pitchfinder$lib$tools$frequencies.js.map
