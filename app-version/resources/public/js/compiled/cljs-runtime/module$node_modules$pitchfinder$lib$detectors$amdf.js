shadow$provide.module$node_modules$pitchfinder$lib$detectors$amdf=function(global,require,module,exports){var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p])}return t};return __assign.apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var DEFAULT_AMDF_PARAMS={sampleRate:44100,minFrequency:82,maxFrequency:1E3,ratio:5,
sensitivity:.1};exports.AMDF=function(params){void 0===params&&(params={});params=__assign(__assign({},DEFAULT_AMDF_PARAMS),params);var sampleRate=params.sampleRate,sensitivity=params.sensitivity,ratio=params.ratio,amd=[],maxPeriod=Math.ceil(sampleRate/params.minFrequency),minPeriod=Math.floor(sampleRate/params.maxFrequency);return function(float32AudioBuffer){var maxShift=float32AudioBuffer.length,minval=Infinity,maxval=-Infinity,frames2,i;for(i=0;i<maxShift;i++)if(minPeriod<=i&&i<=maxPeriod){var u=
0;var aux2=i;var t=0;var frames1=[];for(frames2=[];u<maxShift-i;t++,aux2++,u++)frames1[t]=float32AudioBuffer[u],frames2[t]=float32AudioBuffer[aux2];aux2=frames1.length;t=[];for(u=0;u<aux2;u++)t[u]=frames1[u]-frames2[u];for(u=frames1=0;u<aux2;u++)frames1+=Math.abs(t[u]);amd[i]=frames1}for(float32AudioBuffer=minPeriod;float32AudioBuffer<maxPeriod;float32AudioBuffer++)amd[float32AudioBuffer]<minval&&(minval=amd[float32AudioBuffer]),amd[float32AudioBuffer]>maxval&&(maxval=amd[float32AudioBuffer]);minval=
Math.round(sensitivity*(maxval-minval)+minval);for(float32AudioBuffer=minPeriod;float32AudioBuffer<=maxPeriod&&amd[float32AudioBuffer]>minval;float32AudioBuffer++);maxShift=minPeriod/2;minval=amd[float32AudioBuffer];frames1=float32AudioBuffer;for(i=float32AudioBuffer-1;i<float32AudioBuffer+maxShift&&i<=maxPeriod;i++)amd[i]<minval&&(minval=amd[i],frames1=i);return Math.round(amd[frames1]*ratio)<maxval?sampleRate/frames1:null}}}
//# sourceMappingURL=module$node_modules$pitchfinder$lib$detectors$amdf.js.map
